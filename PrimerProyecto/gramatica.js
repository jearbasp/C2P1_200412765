/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,12],$V2=[1,14],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,15],$V7=[1,16],$V8=[1,26],$V9=[1,27],$Va=[1,22],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[5,23,77,79,80,81],$Vf=[2,5,15,16,23,41,42,43,64,65,71,74,77,79,80,81,82,86,87,88],$Vg=[2,30],$Vh=[1,38],$Vi=[1,40],$Vj=[1,39],$Vk=[1,54],$Vl=[1,52],$Vm=[1,53],$Vn=[1,55],$Vo=[1,46],$Vp=[1,48],$Vq=[1,49],$Vr=[2,5,15,16,17,23,41,42,43,50,51,60,61,64,65,71,74,77,79,80,81,82,86,87,88],$Vs=[1,64],$Vt=[2,19],$Vu=[11,19,20,91,92],$Vv=[11,19,20,55,56,91,92],$Vw=[11,19,20,25,36,55,56,58,59,91,92],$Vx=[1,84],$Vy=[1,85],$Vz=[11,19,20,25,36,39,40,46,47,55,56,58,59,91,92],$VA=[11,19,20,25,36,39,40,46,47,49,55,56,58,59,91,92],$VB=[19,25],$VC=[2,16],$VD=[1,99],$VE=[11,91,92],$VF=[11,19,20,25,36,39,40,55,56,58,59,91,92],$VG=[1,151],$VH=[1,147],$VI=[1,148],$VJ=[1,149],$VK=[1,150],$VL=[1,157],$VM=[1,158],$VN=[19,22,25],$VO=[23,77,79],$VP=[2,84],$VQ=[1,193],$VR=[1,194];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"codigo":4,"EOF":5,"cod":6,"funcion":7,"declaracion":8,"asignacion":9,"llamadaFunc":10,"TOK_PTCOMA":11,"sentenciasControl":12,"sentenciasCiclo":13,"retornaFunc":14,"TOK_FUNCION":15,"TOK_ID":16,"TOK_PARIZQ":17,"parametros":18,"TOK_PARDER":19,"TOK_DOSPUNTOS":20,"typeVar":21,"TOK_LLAIZQ":22,"TOK_LLADER":23,"parametro":24,"TOK_COMA":25,"tipoVar":26,"parametrosEnv":27,"terminalBool":28,"TOK_VOID":29,"TOK_STRING":30,"TOK_NUMBER":31,"TOK_BOOLEAN":32,"TOK_TYPES":33,"tipoDec":34,"igualdad":35,"TOK_IGUAL":36,"expresion":37,"addRest":38,"MAS":39,"MENOS":40,"TOK_LET":41,"TOK_CONST":42,"TOK_VAR":43,"expBooleana":44,"operacionArit":45,"POR":46,"DIVIDIDO":47,"terminal":48,"TOK_ADMIRACION":49,"TOK_DECIMAL":50,"TOK_COMILLA":51,"terniario":52,"TOK_INTERROGACION":53,"expBooleana1":54,"TOK_AND":55,"TOK_OR":56,"TOK_NOT":57,"MAYORQUE":58,"MENORQUE":59,"TOK_TRUE":60,"TOK_FALSE":61,"TOK_PUNTO":62,"opA":63,"TOK_CONSOLA":64,"TOK_GRAFICAR":65,"TOK_PUSH":66,"TOK_POP":67,"TOK_SIZE":68,"sentenciaSi":69,"sentenciaSwitch":70,"TOK_SI":71,"sentenciaSino":72,"TOK_SINO":73,"TOK_ENCASO":74,"casos":75,"caso":76,"TOK_CASO":77,"transferencias":78,"TOK_DEFECTO":79,"TOK_BREAK":80,"TOK_CONTINUE":81,"TOK_RETURN":82,"sentenciaMientras":83,"sentenciaHacerMientras":84,"sentenciaPara":85,"TOK_MIENTRAS":86,"TOK_HACER":87,"TOK_FOR":88,"condicionPara":89,"InOf":90,"TOK_IN":91,"TOK_OF":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"TOK_PTCOMA",15:"TOK_FUNCION",16:"TOK_ID",17:"TOK_PARIZQ",19:"TOK_PARDER",20:"TOK_DOSPUNTOS",22:"TOK_LLAIZQ",23:"TOK_LLADER",25:"TOK_COMA",29:"TOK_VOID",30:"TOK_STRING",31:"TOK_NUMBER",32:"TOK_BOOLEAN",33:"TOK_TYPES",36:"TOK_IGUAL",39:"MAS",40:"MENOS",41:"TOK_LET",42:"TOK_CONST",43:"TOK_VAR",46:"POR",47:"DIVIDIDO",49:"TOK_ADMIRACION",50:"TOK_DECIMAL",51:"TOK_COMILLA",53:"TOK_INTERROGACION",55:"TOK_AND",56:"TOK_OR",57:"TOK_NOT",58:"MAYORQUE",59:"MENORQUE",60:"TOK_TRUE",61:"TOK_FALSE",62:"TOK_PUNTO",64:"TOK_CONSOLA",65:"TOK_GRAFICAR",66:"TOK_PUSH",67:"TOK_POP",68:"TOK_SIZE",71:"TOK_SI",73:"TOK_SINO",74:"TOK_ENCASO",77:"TOK_CASO",79:"TOK_DEFECTO",80:"TOK_BREAK",81:"TOK_CONTINUE",82:"TOK_RETURN",86:"TOK_MIENTRAS",87:"TOK_HACER",88:"TOK_FOR",91:"TOK_IN",92:"TOK_OF"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[7,10],[18,3],[18,1],[24,3],[24,0],[27,3],[27,1],[27,0],[21,1],[21,1],[26,1],[26,1],[26,1],[26,1],[26,1],[8,2],[9,3],[35,2],[35,0],[38,3],[38,3],[34,1],[34,1],[34,1],[37,1],[45,3],[45,3],[45,3],[45,3],[45,4],[45,2],[45,1],[45,3],[48,1],[48,1],[48,3],[48,1],[48,1],[52,5],[44,3],[44,3],[44,2],[44,1],[54,3],[54,3],[54,3],[54,4],[54,4],[54,4],[54,1],[28,1],[28,1],[28,1],[10,4],[10,6],[10,4],[10,3],[63,1],[63,1],[63,1],[12,1],[12,1],[69,8],[72,4],[72,0],[70,7],[75,2],[75,1],[76,5],[76,4],[78,2],[78,2],[78,0],[14,3],[14,2],[13,1],[13,1],[13,1],[83,7],[84,9],[85,7],[89,4],[89,5],[90,1],[90,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
            var codi = eval("$$[$0-1]");
            console.log($$[$0-1].length);
            console.log($$[$0-1]);
            var cadena = '';
            for(var i = 0;i < codi.length;i++){
                cadena = cadena + codi[i];
                //console.log("PrintFor: " + codi[i]);
            }
            console.log('Codigo sin Funciones anidadas: ' + cadena);             
        
break;
case 2:
 let resp = [$$[$0-1]];
                 //this.$ = [$$[$0-1]]; 
                 //console.log("Printcod: " + $$[$0-1]);
                 var s = eval("$$[$0]");
                 let resp1;
                 for(var i = 0;i < s.length; i++){
                        res1 = resp.push(s[i]); 
                        //console.log("Printcod: " + s[i]);
                 }
                 this.$ = res1;
                
break;
case 3:
 this.$ = [$$[$0]]; //console.log("Print: " + $$[$0]);
     
break;
case 4:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 5: case 9: case 10: case 11: case 14: case 18: case 19: case 21: case 22: case 23: case 24: case 25: case 36: case 43: case 45: case 46: case 48: case 54: case 61: case 62: case 63: case 64: case 69: case 70: case 71: case 72: case 73: case 76: case 79: case 87: case 88: case 89: case 95: case 96:
 this.$ = $$[$0]; 
break;
case 6: case 7:
 this.$ = $$[$0] + '\n'; 
break;
case 8:
 this.$ = $$[$0-1] + ';\n'; 
break;
case 12:

            var codigoVar = eval('$$[$0-1]');
            //console.log("PrintFunc: " + codigoVar.length);
            //console.log("PrintFunc0: " + codigoVar[0]);
            var funcionesAnidadas = '';
            var restoCodigo = '';
            for(var i = 0;i < codigoVar.length;i++){
                if(codigoVar[i] != null){
                    if(codigoVar[i].includes('function ')){
                        //console.log("Print: " + codigoVar[i]);
                        funcionesAnidadas = funcionesAnidadas + codigoVar[i].replace('function ', 'function ' + $$[$0-8] + '_');
                    }else{
                        restoCodigo = restoCodigo + codigoVar[i];
                    }
                }
            }
            this.$ = 'function ' + $$[$0-8] + '(' + $$[$0-6] + '):' + $$[$0-3] + '{\n' + restoCodigo + '}\n' + funcionesAnidadas; 
        
break;
case 13: case 17:
 this.$ = $$[$0-2] + ',' + $$[$0]; 
break;
case 15:
 this.$ = $$[$0-2] + ':' + $$[$0]; 
break;
case 16: case 30: case 84:
 this.$ = ''; 
break;
case 20:
 this.$ = 'void'; 
break;
case 26:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); this.$ = 'Types'; 
break;
case 27:
 this.$ = $$[$0-1] + ' ' + $$[$0]; 
break;
case 28:
 this.$ = $$[$0-2] + $$[$0-1] + ';'; 
break;
case 29:
 this.$ = '=' + $$[$0]; 
break;
case 31:
 this.$ = $$[$0-2] + '++'; 
break;
case 32:
 this.$ = $$[$0-2] + '--'; 
break;
case 33:
 this.$ = 'let'; 
break;
case 34:
 this.$ = 'const'; 
break;
case 35:
 this.$ = 'var'; 
break;
case 37:
 this.$ = $$[$0-2] + '+' + $$[$0]; 
break;
case 38:
 this.$ = $$[$0-2] + '-' + $$[$0]; 
break;
case 39:
 this.$ = $$[$0-2] + '*' + $$[$0]; 
break;
case 40:
 this.$ = $$[$0-2] + '/' + $$[$0]; 
break;
case 41:
 this.$ = $$[$0-3] + '^' + $$[$0]; 
break;
case 42:
 this.$ = $$[$0-1] + '!'; 
break;
case 44:
 this.$ = '(' + $$[$0-1] + ')'; 
break;
case 47:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 49:
  this.$ = $$[$0];  
break;
case 50:
 this.$ = $$[$0-4] + '?' + $$[$0-2] + ':' + $$[$0]; 
break;
case 51:
 this.$ = $$[$0-2] + ' AND ' + $$[$0]; 
break;
case 52:
 this.$ = $$[$0-2] + ' OR ' + $$[$0]; 
break;
case 53:
 this.$ = 'NOT ' + $$[$0] ; 
break;
case 55:
 this.$ = $$[$0-2] + '>' + $$[$0]; 
break;
case 56:
 this.$ = $$[$0-2] + '<' + $$[$0]; 
break;
case 57:
 this.$ = $$[$0-2] + '=' + $$[$0]; 
break;
case 58:
 this.$ = $$[$0-3] + '<>' + $$[$0]; 
break;
case 59:
 this.$ = $$[$0-3] + '<=' + $$[$0]; 
break;
case 60:
 this.$ = $$[$0-3] + '>=' + $$[$0]; 
break;
case 65: case 67:
 this.$ = $$[$0-3] + '(' + $$[$0-1] + ')'; 
break;
case 66:
 this.$ = $$[$0-5] + '.' + $$[$0-3] + '(' + $$[$0-1] + ')'; 
break;
case 68:
 this.$ = $$[$0-2] + '()'; 
break;
case 74:
 
            this.$ = 'if(' + $$[$0-5] + '){\n';// + $$[$0-2] + '}\n' + $$[$0];
            var codi = eval("$$[$0-2]");
            for(var i = 0;i < codi.length;i++){
                this.$ = this.$ + codi[i];
            }
            this.$ = this.$ + '}\n' + $$[$0];
        
break;
case 75:
 
            this.$ = 'else{\n';// + $$[$0-1] + '\n}\n'; 
            var codi = eval("$$[$0-1]");
            for(var i = 0;i < codi.length;i++){
                this.$ = this.$ + codi[i];
            }
            this.$ = this.$ + '}\n';
        
break;
case 77:
 this.$ = 'switch(' + $$[$0-4] + '){\n' + $$[$0-1] + '\n}\n'; 
break;
case 78:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 80:
 this.$ = 'case ' + $$[$0-3] + ':' + $$[$0-1] + $$[$0] + '\n'; 
break;
case 81:
 this.$ = 'default:' + $$[$0-1] + $$[$0] + '\n'; 
break;
case 82:
 this.$ = 'break;'; 
break;
case 83:
 this.$ = 'continue;'; 
break;
case 85:
 this.$ = 'return ' + $$[$0-1] + ';\n'; 
break;
case 86:
 this.$ = 'return;\n'; 
break;
case 90:
 this.$ = 'while(' + $$[$0-4] + '){\n' + $$[$0-1] + '\n}\n'; 
break;
case 91:
 this.$ = 'do{\n' + $$[$0-6] + '\n}while(' + $$[$0-2] + ');\n'; 
break;
case 92:
 this.$ = 'for(' + $$[$0-4] + '){\n' + $$[$0-1] + '}\n'; 
break;
case 93:
 this.$ = $$[$0-3] + $$[$0-2] + ';' + $$[$0]; 
break;
case 94:
 this.$ = $$[$0-4] + ' ' + $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},{1:[3]},{5:[1,31]},o($Ve,[2,3],{6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,34:13,69:17,70:18,83:19,84:20,85:21,4:32,2:$V0,15:$V1,16:$V2,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,71:$V8,74:$V9,82:$Va,86:$Vb,87:$Vc,88:$Vd}),o($Ve,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),{11:[1,33]},o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),{16:[1,34]},{9:35,16:[1,36]},{11:$Vg,17:$Vh,35:37,36:$Vi,62:$Vj},{17:[1,41]},{17:[1,42]},o($Vf,[2,72]),o($Vf,[2,73]),o($Vf,[2,87]),o($Vf,[2,88]),o($Vf,[2,89]),{10:56,11:[1,44],16:$Vk,17:$Vl,28:47,44:43,45:50,48:51,50:$Vm,51:$Vn,52:57,54:45,57:$Vo,60:$Vp,61:$Vq,64:$V6,65:$V7},{16:[2,33]},{16:[2,34]},{16:[2,35]},{17:[1,58]},{17:[1,59]},{17:[1,60]},{22:[1,61]},{17:[1,62]},{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,8]),{17:[1,63]},o($Vr,[2,27]),{11:$Vg,35:37,36:$Vi},{11:$Vs},{10:56,16:$Vk,17:$Vl,19:$Vt,27:65,28:66,45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},{63:67,66:[1,68],67:[1,69],68:[1,70]},{10:56,16:$Vk,17:$Vl,28:47,37:71,44:72,45:50,48:51,50:$Vm,51:$Vn,52:57,54:45,57:$Vo,60:$Vp,61:$Vq,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,19:$Vt,27:73,28:66,45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},{19:[1,74]},{11:[1,75]},o($Vf,[2,86]),o($Vu,[2,54],{55:[1,76],56:[1,77]}),{10:56,16:$Vk,17:$Vl,28:47,45:50,48:51,50:$Vm,51:$Vn,52:57,54:78,60:$Vp,61:$Vq,64:$V6,65:$V7},o($Vv,[2,61],{36:[1,81],58:[1,79],59:[1,80]}),o($Vw,[2,62]),o($Vw,[2,63]),o($Vw,[2,64],{39:[1,82],40:[1,83],46:$Vx,47:$Vy}),o($Vz,[2,43],{49:[1,86]}),{10:56,16:$Vk,17:$Vl,28:47,44:87,45:50,48:51,50:$Vm,51:$Vn,52:57,54:45,57:$Vo,60:$Vp,61:$Vq,64:$V6,65:$V7},o($VA,[2,45]),o($VA,[2,46],{17:$Vh,53:[1,88],62:$Vj}),{16:[1,89]},o($VA,[2,48]),o($VA,[2,49]),{10:56,16:$Vk,17:$Vl,28:47,44:90,45:50,48:51,50:$Vm,51:$Vn,52:57,54:45,57:$Vo,60:$Vp,61:$Vq,64:$V6,65:$V7},{10:56,16:$Vk,48:91,50:$Vm,51:$Vn,52:57,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,28:47,44:92,45:50,48:51,50:$Vm,51:$Vn,52:57,54:45,57:$Vo,60:$Vp,61:$Vq,64:$V6,65:$V7},{2:$V0,4:93,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},{8:95,34:96,41:$V3,42:$V4,43:$V5,89:94},o($VB,$VC,{18:97,24:98,16:$VD}),o($Vr,[2,28]),{19:[1,100]},{19:[2,18],25:[1,101]},{17:[1,102]},{17:[2,69]},{17:[2,70]},{17:[2,71]},o($VE,[2,29]),o([11,20,91,92],[2,36]),{19:[1,103]},o($VA,[2,68]),o($Vf,[2,85]),{10:56,16:$Vk,17:$Vl,28:47,45:50,48:51,50:$Vm,51:$Vn,52:57,54:104,60:$Vp,61:$Vq,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,28:47,45:50,48:51,50:$Vm,51:$Vn,52:57,54:105,60:$Vp,61:$Vq,64:$V6,65:$V7},o($Vu,[2,53]),{10:56,16:$Vk,17:$Vl,28:106,36:[1,107],45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,28:108,36:[1,110],45:50,48:51,50:$Vm,51:$Vn,52:57,58:[1,109],60:$Vp,61:$Vq,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,28:111,45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,45:112,48:51,50:$Vm,51:$Vn,52:57,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,45:113,48:51,50:$Vm,51:$Vn,52:57,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,45:114,46:[1,115],48:51,50:$Vm,51:$Vn,52:57,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,45:116,48:51,50:$Vm,51:$Vn,52:57,64:$V6,65:$V7},o($Vz,[2,42]),{19:[1,117]},{10:56,16:$Vk,17:$Vl,28:47,37:118,44:72,45:50,48:51,50:$Vm,51:$Vn,52:57,54:45,57:$Vo,60:$Vp,61:$Vq,64:$V6,65:$V7},{51:[1,119]},{19:[1,120]},{19:[1,121]},{19:[1,122]},{23:[1,123]},{19:[1,124]},{10:56,16:$Vk,17:$Vl,28:47,45:50,48:51,50:$Vm,51:$Vn,52:57,54:125,60:$Vp,61:$Vq,64:$V6,65:$V7},{9:35,16:[1,126]},{19:[1,127]},{19:[2,14],25:[1,128]},{20:[1,129]},o($VA,[2,65]),{10:56,16:$Vk,17:$Vl,19:$Vt,27:130,28:66,45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,19:$Vt,27:131,28:66,45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},o($VA,[2,67]),o($Vu,[2,51]),o($Vu,[2,52]),o($Vv,[2,55]),{10:56,16:$Vk,17:$Vl,28:132,45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},o($Vv,[2,56]),{10:56,16:$Vk,17:$Vl,28:133,45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},{10:56,16:$Vk,17:$Vl,28:134,45:50,48:51,50:$Vm,51:$Vn,52:57,60:$Vp,61:$Vq,64:$V6,65:$V7},o($Vv,[2,57]),o($VF,[2,37],{46:$Vx,47:$Vy}),o($VF,[2,38],{46:$Vx,47:$Vy}),o($Vz,[2,39]),{10:56,16:$Vk,17:$Vl,45:135,48:51,50:$Vm,51:$Vn,52:57,64:$V6,65:$V7},o($Vz,[2,40]),o($Vz,[2,44]),{20:[1,136]},o($VA,[2,47]),{22:[1,137]},{22:[1,138]},{22:[1,139]},{86:[1,140]},{22:[1,141]},{11:[1,142]},o($VE,$Vg,{35:143,36:$Vi}),{20:[1,144]},o($VB,$VC,{24:98,18:145,16:$VD}),{2:$VG,26:146,30:$VH,31:$VI,32:$VJ,33:$VK},{19:[2,17]},{19:[1,152]},o($Vv,[2,60]),o($Vv,[2,58]),o($Vv,[2,59]),o($Vz,[2,41]),{10:56,16:$Vk,48:153,50:$Vm,51:$Vn,52:57,64:$V6,65:$V7},{2:$V0,4:154,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},{75:155,76:156,77:$VL,79:$VM},{2:$V0,4:159,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},{17:[1,160]},{2:$V0,4:161,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},{16:[1,163],38:162},{11:$Vs,90:164,91:[1,165],92:[1,166]},{2:$VG,21:167,26:169,29:[1,168],30:$VH,31:$VI,32:$VJ,33:$VK},{19:[2,13]},o($VB,[2,15]),o($VN,[2,22]),o($VN,[2,23]),o($VN,[2,24]),o($VN,[2,25]),o($VN,[2,26]),o($VA,[2,66]),o($VA,[2,50]),{23:[1,170]},{23:[1,171]},{23:[2,79],75:172,76:156,77:$VL,79:$VM},{10:56,16:$Vk,48:173,50:$Vm,51:$Vn,52:57,64:$V6,65:$V7},{20:[1,174]},{23:[1,175]},{10:56,16:$Vk,17:$Vl,28:47,44:176,45:50,48:51,50:$Vm,51:$Vn,52:57,54:45,57:$Vo,60:$Vp,61:$Vq,64:$V6,65:$V7},{23:[1,177]},{19:[2,93]},{39:[1,178],40:[1,179]},{16:[1,180]},{16:[2,95]},{16:[2,96]},{22:[1,181]},{22:[2,20]},{22:[2,21]},o($Vf,[2,76],{72:182,73:[1,183]}),o($Vf,[2,77]),{23:[2,78]},{20:[1,184]},{2:$V0,4:185,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},o($Vf,[2,90]),{19:[1,186]},o($Vf,[2,92]),{39:[1,187]},{40:[1,188]},{19:[2,94]},{2:$V0,4:189,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},o($Vf,[2,74]),{22:[1,190]},{2:$V0,4:191,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},o($VO,$VP,{78:192,80:$VQ,81:$VR}),{11:[1,195]},{19:[2,31]},{19:[2,32]},{23:[1,196]},{2:$V0,4:197,6:3,7:5,8:6,9:7,10:8,12:9,13:10,14:11,15:$V1,16:$V2,34:13,41:$V3,42:$V4,43:$V5,64:$V6,65:$V7,69:17,70:18,71:$V8,74:$V9,82:$Va,83:19,84:20,85:21,86:$Vb,87:$Vc,88:$Vd},o($VO,$VP,{78:198,80:$VQ,81:$VR}),o($VO,[2,81]),{11:[1,199]},{11:[1,200]},o($Vf,[2,91]),o($Vf,[2,12]),{23:[1,201]},o($VO,[2,80]),o($VO,[2,82]),o($VO,[2,83]),o($Vf,[2,75])],
defaultActions: {23:[2,33],24:[2,34],25:[2,35],31:[2,1],68:[2,69],69:[2,70],70:[2,71],130:[2,17],145:[2,13],162:[2,93],165:[2,95],166:[2,96],168:[2,20],169:[2,21],172:[2,78],180:[2,94],187:[2,31],188:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 15;
break;
case 1:return 29;
break;
case 2:return 30;
break;
case 3:return 31;
break;
case 4:return 32;
break;
case 5:return 33;
break;
case 6:return 41;
break;
case 7:return 42;
break;
case 8:return 60;
break;
case 9:return 61;
break;
case 10:return 55;
break;
case 11:return 56;
break;
case 12:return 57;
break;
case 13:return 64;
break;
case 14:return 65;
break;
case 15:return 82;
break;
case 16:return 81;
break;
case 17:return 80;
break;
case 18:return 71;
break;
case 19:return 73;
break;
case 20:return 74;
break;
case 21:return 77;
break;
case 22:return 79;
break;
case 23:return 88;
break;
case 24:return 91;
break;
case 25:return 92;
break;
case 26:return 86;
break;
case 27:return 87;
break;
case 28:return 43;
break;
case 29:return 66;
break;
case 30:return 67;
break;
case 31:return 68;
break;
case 32:return 11;
break;
case 33:return 17;
break;
case 34:return 19;
break;
case 35:return 'TOK_CORIZQ';
break;
case 36:return 'TOK_CORDER';
break;
case 37:return 22;
break;
case 38:return 23;
break;
case 39:return 20;
break;
case 40:return 25;
break;
case 41:return 51;
break;
case 42:return 49;
break;
case 43:return 53;
break;
case 44:return 62;
break;
case 45:return 'MODIFICADOR';
break;
case 46:return 36;
break;
case 47:return 39;
break;
case 48:return 40;
break;
case 49:return 46;
break;
case 50:return 47;
break;
case 51:return 58;
break;
case 52:return 59;
break;
case 53:
break;
case 54:
break;
case 55:return 50;
break;
case 56:return 16;
break;
case 57:return 'TOK_TEXTO';
break;
case 58:return 5;
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:function\b)/i,/^(?:void\b)/i,/^(?:String\b)/i,/^(?:Number\b)/i,/^(?:Boolean\b)/i,/^(?:types\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:console\.log\b)/i,/^(?:graficar_ts\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:var\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:,)/i,/^(?:')/i,/^(?:!)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:%)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>)/i,/^(?:<)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_" "]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}